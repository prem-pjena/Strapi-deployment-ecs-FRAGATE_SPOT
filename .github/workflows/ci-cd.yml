name: Full CI/CD Pipeline with Auto-Terraform Destroy

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Log in to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and Push Docker Image (amd64)
      run: |
        ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
        IMAGE_URI="$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:latest"
        
        docker buildx create --use
        docker buildx build --platform linux/amd64 -t $IMAGE_URI . --push

        echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Initialize Terraform
      run: terraform -chdir=terraform init

    - name: Plan Terraform
      id: plan_step
      run: terraform -chdir=terraform plan -out=tfplan
      continue-on-error: true

    - name: Handle Terraform Plan Fail
      if: steps.plan_step.outcome == 'failure'
      run: |
        echo "Terraform plan failed. Destroying any created resources..."
        terraform -chdir=terraform destroy -auto-approve || true
        exit 1

    - name: Apply Terraform
      id: apply_step
      run: terraform -chdir=terraform apply -auto-approve tfplan
      continue-on-error: true

    - name: Handle Terraform Apply Fail
      if: steps.apply_step.outcome == 'failure'
      run: |
        echo "Terraform apply failed. Destroying any created resources..."
        terraform -chdir=terraform destroy -auto-approve || true
        exit 1

    - name: Get ALB DNS from Terraform
      id: get_dns
      run: |
        STRAPI_URL=$(terraform -chdir=terraform output -raw strapi_url)
        echo "STRAPI_URL=$STRAPI_URL" >> $GITHUB_ENV
        echo "Strapi URL: $STRAPI_URL"

    - name: Show Output
      run: terraform -chdir=terraform output strapi_url

    - name: Schedule Destroy in 5 Minutes
      run: |
        echo "Scheduling Terraform destroy in 5 minutes..."
        echo 'terraform -chdir=terraform destroy -auto-approve' > destroy.sh
        chmod +x destroy.sh
        nohup bash -c "sleep 300 && ./destroy.sh" &
